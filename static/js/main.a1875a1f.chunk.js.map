{"version":3,"sources":["ModProg.ts","ProgPane.tsx","App.tsx","index.tsx"],"names":["Next","2","3","4","5","6","7","ChordNames","Pitches","Scales","isFinal","chords","end","minLen","last","_","length","chordName","pitch","mode","addChord","priority","Error","nexts","from","range","priorities","fill","nextCandidateUnzip","zip","map","chord","value","nextCandidate","uniqueNexts","filter","s","sequence","indexOf","r","concat","Version","version","ChordModes","Chords","i","key","Badge","variant","name","Chain","avgPriority","modes","join","toFixed","ProgressionsPane","chains","Table","striped","bordered","hover","size","chain","ResultPane","errors","progressions","Alert","PitchControl","onChange","FormControl","as","ev","target","ton","Rank","parseInt","LengthControl","min","max","ProgPane","props","state","start","maxLen","bindAll","this","setState","undefined","seed","flatten","ary","partition","chainsWithNames","sortBy","createProgressions","result","compute","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Container","Row","Col","xs","Form","FormGroup","controlId","Label","handlePitch","handleStartRank","handleEndRank","handleMinLen","handleMaxLen","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1875a1f.chunk.js","sourcesContent":["import _ from 'lodash';\n\n/**\n * Number from 1 to 8\n */\nexport type ChordMode = number;\n\nexport type Pitch = string;\n\nexport type Note = string;\n\nexport type FullChordName = string;\n\n/**\n * List of next chord by priority\n * the number indicate the chord\n */\nconst Next: Record<ChordMode, ChordMode[]> = {\n    2: [5, 3, 4, 6, 7],\n    3: [6, 4, 2, 5],\n    4: [5, 1, 6, 2, 7, 3],\n    5: [1, 6, 3, 4],\n    6: [2, 5, 4, 3],\n    7: [1, 6, 3, 5]\n};\n\nconst ChordNames = ['Maj7', 'm7', 'm7(b9)', 'Maj7(+11)', '7', 'm7(+5)', 'm7b5'];\n\nexport const Pitches = ['C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'F', 'Bb', 'Eb', 'Ab', 'Db', 'Gb', 'Cb'];\n\n/**\n * Map between pitch and notes\n */\nconst Scales: Readonly<Record<Pitch, Note[]>> = {\n    'C': ['C', 'D', 'E', 'F', 'G', 'A', 'B'],\n    'G': ['G', 'A', 'B', 'C', 'D', 'E', 'F#'],\n    'D': ['D', 'E', 'F#', 'G', 'A', 'B', 'C#'],\n    'A': ['A', 'B', 'C#', 'D', 'E', 'F#', 'G#'],\n    'E': ['E', 'F#', 'G', 'A', 'B', 'C#', 'D#'],\n    'B': ['B', 'C#', 'D#', 'E', 'F#', 'G', 'A#'],\n    'F#': ['F#', 'G', 'A#', 'B', 'C#', 'D#', 'E#'],\n    'C#': ['C#', 'D#', 'E#', 'F#', 'G', 'A#', 'B#'],\n    'F': ['F', 'G', 'A', 'Bb', 'C', 'D', 'E'],\n    'Bb': ['Bb', 'C', 'D', 'Eb', 'F', 'G', 'A'],\n    'Eb': ['Eb', 'F', 'G', 'Ab', 'Bb', 'C', 'D'],\n    'Ab': ['Ab', 'Bb', 'C', 'Db', 'Eb', 'F', 'G'],\n    'Db': ['Db', 'Eb', 'F', 'Gb', 'Ab', 'Bb', 'C'],\n    'Gb': ['Gb', 'Ab', 'Bb', 'Cb', 'Db', 'Eb', 'F'],\n    'Cb': ['Cb', 'Db', 'Eb', 'Fb', 'Gb', 'Ab', 'Bb',],\n};\n\n/**\n * Returns true if the chord sequence doeas not contain the chord\n * @param {*} sequence array of chord modes\n * @param {*} chord chord mode\n */\nfunction notContains(sequence: ChordMode[], chord: ChordMode): boolean {\n    const dupIdx = _.indexOf(sequence, chord);\n    const result = dupIdx < 0;\n    return result;\n}\n\ntype Constraints = Readonly<{\n    end: ChordMode;\n    minLen: number;\n}>;\n\n/**\n * Returns true if chords sequence metch the end and the length constraints\n * @param chords \n * @param param1 \n */\nfunction isFinal(chords: ChordMode[], { end, minLen }: Constraints) {\n    const last = _.last(chords);\n    return chords.length >= minLen && end === last;\n}\n\n/**\n * Returns the full name of chord\n * @param pitch the pitch\n * @param mode  the chord mode\n */\nfunction chordName(pitch: Pitch, mode: ChordMode): FullChordName {\n    return Scales[pitch][mode - 1] + ChordNames[mode - 1];\n}\n\ninterface ChordStep extends Readonly<{\n    chord: ChordMode;\n    priority: number;\n}> { };\n\ninterface ChordChoices extends Readonly<{\n    chords: ChordMode[];\n    priorities: number[];\n}> { };\n\nexport interface ChordSeq extends Readonly<{\n    chords: ChordMode[];\n    priority: number;\n}> { };\n\n/**\n *  Return the list of next candidate chords\n * ```\n *  [{\n *   chord: integer,\n *   priority: integer\n *   },\n *   ...\n *  ]\n * }\n * ```\n * @param {*} from \n */\nexport function nextCandidate(from: ChordMode): ChordStep[] {\n\n    function nextCandidateUnzip(): ChordChoices {\n        if (from === 1) {\n            const chords = _.range(2, 8);\n            const priorities = _.fill(_.range(2, 8), 1);\n            const result: ChordChoices = {\n                chords, priorities\n            };\n            return result;\n        } else {\n            const chords = Next[from];\n            const priorities = _.range(1, chords.length + 1);\n            const result: ChordChoices = {\n                chords, priorities\n            };\n            return result;\n        }\n    };\n    const { chords, priorities } = nextCandidateUnzip();\n    const result: ChordStep[] = _(chords).zip(priorities).map(([chord, priority]) => {\n        if (!chord || !priority) {\n            throw new Error('wrong candidates');\n        }\n        return { chord, priority };\n    }).value();\n    return result;\n}\n\n/**\n * Returns the a list of chords added by next chord\n *\n * @param {*} param0 \n */\nexport function addChord({ chords, priority }: ChordSeq, { end, minLen }: Constraints): ChordSeq[] {\n    const last = _.last(chords);\n    if (!last) {\n        throw new Error('no last found');\n    }\n    const nexts = nextCandidate(last);\n    // filter for unique chord sequence\n    const uniqueNexts = _.filter(nexts, s => {\n        return notContains(chords, s.chord) ||\n            (s.chord === end && chords.length + 1 >= minLen);\n    });\n    const result: ChordSeq[] = _.map(uniqueNexts, r => {\n        return {\n            chords: _.concat(chords, r.chord),\n            priority: priority + r.priority\n        }\n    });\n    return result;\n}\n\nexport interface Chord extends Readonly<{\n    mode: ChordMode;\n    name: FullChordName;\n}> { };\n\nexport interface ChordChain extends Readonly<{\n    priority: number;\n    avgPriority: number;\n    chords: Chord[];\n}> { };\n\nexport interface Progressions extends Readonly<{\n    pitch: Pitch;\n    chains: ChordChain[];\n}> { };\n\nexport type ProgressionProps = Readonly<{\n    start: ChordMode;\n    end: ChordMode;\n    minLen: number;\n    maxLen: number;\n    pitch: Pitch;\n}>;\n\n/**\n * Returns the chains\n * \n * @param {*} param0 \n */\nexport function createProgressions({ start, end, minLen, maxLen, pitch }: ProgressionProps): Progressions {\n    var seed: ChordSeq[] = [{ chords: [start], priority: 0 }];\n    var chains: ChordSeq[] = [];\n    for (var i = 1; i <= maxLen - 1; i++) {\n        const nexts = _(seed).map(s => addChord(s, { end, minLen })).flatten().value();\n        const ary = _.partition(nexts, s => isFinal(s.chords, { end, minLen }));\n        chains = _.concat(chains, ary[0]);\n        seed = ary[1];\n    }\n    const chainsWithNames = _(chains)\n        .map(chain => {\n            const avgPriority = chain.priority / (chain.chords.length - 1);\n            const chords = _.map(chain.chords, mode => {\n                return {\n                    mode,\n                    name: chordName(pitch, mode)\n                };\n            });\n            const result = {\n                avgPriority, chords,\n                priority: chain.priority\n            };\n            return result;\n        })\n        .sortBy('avgPriority', 'priority', chain => chain.chords.length)\n        .value();\n    const result = {\n        pitch: pitch,\n        chains: chainsWithNames\n    };\n    return result;\n}\n","import React, { Component, FunctionComponent } from 'react';\nimport './App.css';\nimport { createProgressions, Pitches, Pitch, ChordMode, Progressions, ChordChain, Chord } from './ModProg';\nimport _ from 'lodash';\nimport { Container, Navbar, Form, FormControl, FormGroup, Row, Col, Table, Badge, Alert, Nav } from 'react-bootstrap';\nimport {version} from '../package.json';\n\nconst Version = version;\n\nconst ChordModes = _.range(1, 8);\n\n/**\n * \n */\ntype Result = Readonly<{\n  progressions?: Progressions;\n  errors?: string\n}>;\n\n/**\n * \n * @param param0 \n */\nconst Chords: FunctionComponent<Readonly<{\n  value?: Chord[];\n}>> = ({ value = [] }) => {\n  return (\n    <span>\n      {_.map(value, (chord, i) => (\n        <span key={i}>\n          <Badge variant=\"primary\" >{chord.name}</Badge><span> </span>\n        </span>\n      ))}\n    </span>\n  );\n}\n\n/**\n * \n * @param param0 \n */\nconst Chain: FunctionComponent<Readonly<{\n  value?: ChordChain;\n}>> = ({ value }) => {\n  if (value) {\n    const { avgPriority, priority, chords } = value;\n    const modes = _.join(_.map(chords, 'mode'), '-');\n    return (<tr>\n      <td>{modes}</td>\n      <td>\n        <Chords value={chords} />\n      </td>\n      <td>{avgPriority.toFixed(2)}</td>\n      <td>{priority}</td>\n    </tr>);\n  } else {\n    return <tr />;\n  }\n}\n\n/**\n * \n * @param param0 \n */\nconst ProgressionsPane: FunctionComponent<Readonly<{\n  value?: Progressions;\n}>> = ({ value }) => {\n  const chains = value?.chains || [];\n  return (\n    <Table striped bordered hover size=\"sm\">\n      <thead>\n        <tr>\n          <th>Modes</th>\n          <th>Chords</th>\n          <th>Average Favor</th>\n          <th>Total Favor</th>\n        </tr>\n      </thead>\n      <tbody>\n        {_.map(chains, (chain, i) => (\n          <Chain key={i} value={chain} />\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\n/**\n * \n * @param param0 \n */\nconst ResultPane: FunctionComponent<Readonly<{\n  value?: Result;\n}>> = ({ value }) => {\n  const errors = value?.errors;\n  const progressions = value?.progressions;\n\n  if (errors) {\n    return (\n      <Alert variant=\"danger\">{errors}</Alert>\n    );\n  }\n  if (progressions) {\n    return (<ProgressionsPane value={progressions} />);\n  }\n  return <div />;\n}\n\n/**\n * \n * @param param0 \n */\nconst PitchControl: FunctionComponent<Partial<Readonly<{\n  value: Pitch;\n  onChange: (arg: Pitch) => void\n}>>> = ({ value, onChange }) => {\n  return (\n    <FormControl as=\"select\" size=\"sm\"\n      onChange={ev => { if (onChange) { onChange(ev.target.value); } }}\n      value={value}>\n      {_.map(Pitches, ton => (\n        <option key={ton}>{ton}</option>\n      ))}\n    </FormControl>\n  );\n};\n\n/**\n * \n * @param param0 \n */\nconst Rank: FunctionComponent<Partial<Readonly<{\n  value: ChordMode;\n  onChange: (arg: ChordMode) => void\n}>>> = ({ value, onChange }) => {\n  return (\n    <FormControl as=\"select\" size=\"sm\"\n      onChange={ev => { if (onChange) { onChange(parseInt(ev.target.value)); } }}\n      value={value}>\n      {ChordModes.map(r => (\n        <option key={r}>{r}</option>\n      ))}\n    </FormControl>\n  );\n}\n\n/**\n * \n * @param param0 \n */\nconst LengthControl: FunctionComponent<Partial<Readonly<{\n  value: number;\n  min: number;\n  max: number;\n  onChange: (arg: number) => void\n}>>> = ({ value, min = 1, max = 7, onChange }) => {\n  return (\n    <FormControl as=\"select\" size=\"sm\"\n      onChange={ev => { if (onChange) { onChange(parseInt(ev.target.value)) } }}\n      value={value}>\n      {_.range(min, max + 1).map(r => (\n        <option key={r}>{r}</option>\n      ))}\n    </FormControl>\n  );\n}\n\n/**\n * \n */\nexport class ProgPane extends Component<{}, Readonly<{\n  start: ChordMode;\n  end: ChordMode;\n  pitch: Pitch;\n  minLen: number;\n  maxLen: number;\n}>>\n{\n  /**\n   * \n   * @param props \n   */\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      start: 1,\n      end: 1,\n      pitch: 'C',\n      minLen: 2,\n      maxLen: 3\n    };\n    _.bindAll(this, [\n      'handlePitch',\n      'handleStartRank',\n      'handleEndRank',\n      'handleMinLen',\n      'handleMaxLen',\n      'compute'\n    ]);\n  }\n\n  /**\n   * \n   */\n  componentDidMount() {\n    // this.compute();\n  }\n\n  /**\n   * \n   * @param pitch \n   */\n  private handlePitch(pitch: Pitch) {\n    this.setState({ pitch });\n  }\n\n  /**\n   * \n   * @param start \n   */\n  private handleStartRank(start: ChordMode) {\n    this.setState({ start });\n  }\n\n  /**\n   * \n   * @param end \n   */\n  private handleEndRank(end: ChordMode) {\n    this.setState({ end });\n  }\n\n  /**\n   * \n   * @param minLen \n   */\n  private handleMinLen(minLen: number) {\n    this.setState({ minLen });\n  }\n\n  /**\n   * \n   * @param maxLen \n   */\n  private handleMaxLen(maxLen: number) {\n    this.setState({ maxLen });\n  }\n\n  /**\n   * \n   */\n  private compute(): Result {\n    const errors = (this.state.minLen > this.state.maxLen) ?\n      'min length must be less or equal than max length' :\n      undefined;\n    if (errors) {\n      return { errors };\n    } else {\n      const progressions = createProgressions(this.state);\n      return { progressions }\n    }\n  }\n\n  render() {\n    const { pitch, minLen, maxLen, start, end } = this.state;\n    const result = this.compute();\n\n    return (\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n          <Navbar.Brand href=\"http://www.mmarini.org\">www.mmarini.org</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"#\">Modal Progressions {Version}</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <Container>\n          <Row>\n            <Col >\n              <ResultPane value={result} />\n            </Col>\n            <Col xs={2}>\n              <Form >\n                <FormGroup controlId=\"pitch\">\n                  <Form.Label>Pitch</Form.Label>\n                  <PitchControl value={pitch} onChange={this.handlePitch} />\n                </FormGroup>\n                <FormGroup controlId=\"startMode\">\n                  <Form.Label>Start mode</Form.Label>\n                  <Rank value={start} onChange={this.handleStartRank} />\n                </FormGroup>\n                <FormGroup controlId=\"endMode\">\n                  <Form.Label>End mode</Form.Label>\n                  <Rank value={end} onChange={this.handleEndRank} />\n                </FormGroup>\n                <FormGroup controlId=\"minLen\">\n                  <Form.Label>Min chain length</Form.Label>\n                  <LengthControl value={minLen} min={2} max={8} onChange={this.handleMinLen} />\n                </FormGroup>\n                <FormGroup controlId=\"minLen\">\n                  <Form.Label>Max chain length</Form.Label>\n                  <LengthControl value={maxLen} min={2} max={8} onChange={this.handleMaxLen} />\n                </FormGroup>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n      </div >\n    );\n  }\n}\n","import React, { FunctionComponent } from 'react';\nimport './App.css';\nimport { ProgPane } from './ProgPane';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport const App: FunctionComponent<{}> = () => {\n  return (\n    <div>\n      <ProgPane />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}